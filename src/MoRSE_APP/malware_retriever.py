import os
import json
import time
import sys
import statistics
import pandas as pd
from tqdm import tqdm
import streamlit as st
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceBgeEmbeddings
from langchain.retrievers import BM25Retriever, EnsembleRetriever, TFIDFRetriever

class MalwareRetriever:
    def __init__(self):
        self.malware_dict = self.get_malware_dict()
        self.model_name = "BAAI/bge-large-en"
        self.model_kwargs = {"device": "cpu"}
        self.encode_kwargs = {"normalize_embeddings": True}
        self.DB = None

    def get_malware_dict(self):
        """Load malware dictionary from a JSON file."""
        json_file_path = 'malware_info_complete.json'
        print("[!] Loading JSON file ...")
        with open(json_file_path, 'r') as json_file:
            malware_dict = json.load(json_file)
        return malware_dict

    def set_db(self):
        """Load the FAISS database."""
        print("[!] Loading DB")
        hf = HuggingFaceBgeEmbeddings(
            model_name=self.model_name, model_kwargs=self.model_kwargs, encode_kwargs=self.encode_kwargs
        )
        db = FAISS.load_local("Malware_Names_Complete", hf)
        return db

    def set_retriever(self):
        """Set up the retriever using the FAISS database."""
        db = self.set_db()
        self.DB = db
        retriever = db.as_retriever(search_type="similarity_score_threshold", search_kwargs={"score_threshold": 0.7, "k": 10})
        return retriever

    def create_retriever(self):
        """Create and save a new FAISS database from malware names."""
        hf = HuggingFaceBgeEmbeddings(
            model_name=self.model_name, model_kwargs=self.model_kwargs, encode_kwargs=self.encode_kwargs
        )
        docs = list(self.malware_dict.keys())
        print("[+] Building Malware DB ...")
        db = FAISS.from_texts(docs, hf)
        print("[+] Saving Malware DB ...")
        db.save_local("Malware_Names_Complete")
        retriever = db.as_retriever(search_type="similarity_score_threshold", search_kwargs={"score_threshold": 0.7, "k": 10})
        return retriever

class MalwareFileRetriever:
    def __init__(self):
        self.model_name = "BAAI/bge-large-en"
        self.model_kwargs = {"device": "cpu"}
        self.encode_kwargs = {"normalize_embeddings": True}
        self.malware_file_dict = {}

    def create_file_retriever(self, malware_dict):
        """Create and save a FAISS database from malware files."""
        hf = HuggingFaceBgeEmbeddings(
            model_name=self.model_name, model_kwargs=self.model_kwargs, encode_kwargs=self.encode_kwargs
        )
        docs = []
        files = []
        for key, values in malware_dict.items():
            for file, code in values:
                file = file.rsplit('\\', 2)[-1]
                if file not in files:
                    files.append(file)
                    print(file)
                    self.malware_file_dict[file] = code
                    docs.append(file)
        db = FAISS.from_texts(docs, hf)
        db.save_local('Malware_File_DB')
        retriever = db.as_retriever(search_type="similarity_score_threshold", search_kwargs={"score_threshold": 0.8, "top_k": 3})
        return retriever

    def load_file_retriever(self):
        """Load the FAISS database for malware files."""
        hf = HuggingFaceBgeEmbeddings(
            model_name=self.model_name, model_kwargs=self.model_kwargs, encode_kwargs=self.encode_kwargs
        )
        db = FAISS.load_local('Malware_File_DB', hf)
        retriever = db.as_retriever(search_type="similarity_score_threshold", search_kwargs={"score_threshold": 0.75, "top_k": 2})
        return retriever

    def load_malware_file_dict_from_json(self, json_file_path):
        """Load the malware file dictionary from a JSON file."""
        print("[!] Loading JSON file ...")
        with open(json_file_path, 'r') as json_file:
            self.malware_file_dict = json.load(json_file)
        print(f"Malware file has been loaded from: {json_file_path}")
        return self.malware_file_dict

def main(malware_dict, malware_retriever_instance):
    """Main function to process queries and retrieve malware information."""
    times = []
    total_contexts = []
    with open("malware_scripts_questions.txt", "r") as ms:
        lines = ms.readlines()
        
    for query in lines:
        if query:
            context = ''
            start_time = time.time()
            st.info("Retrieved Malware ...")
            print(f"QUERY: {query}")
            for name in malware_retriever_instance.get_relevant_documents(query):
                print(name.page_content)
                total_contexts.append(name.page_content)
                malware_list = malware_dict[name.page_content]
                file_names = [tupla[0] for tupla in malware_list]
                codes = [tupla[1] for tupla in malware_list]
                filtered_data = [s.rsplit('\\', 2)[-1] for s in file_names]
                data = {
                    'file': filtered_data,
                    'codes': codes
                }
                df = pd.DataFrame(data)
                end_time = time.time()
                times.append(end_time - start_time)
            print(f"elapsed time: {end_time - start_time}")
            with open("MALWARE_RETRIEVER_PERFORMANCES.txt", "a") as m:
                m.write(f"elapsed time: {end_time - start_time}\n")
                m.write(f"QUERY: {query}\n")
                m.write(str(df))
                m.write("\n----------------\n")

    FAILS = sum(1 for con in total_contexts if con == '')
    media = statistics.mean(times)
    std = statistics.stdev(times)

    print(f"TOTAL FAILS: {FAILS}")
    print(f"Average time elapsed: {media}")
    print(f"Standard Deviation: {std}")

def find_file(file_retriever):
    """Function to find and print malware file information based on user query."""
    while True:
        query = input("\n\nSay something: ")
        try:
            if query:
                start_time = time.time()
                st.info("Retrieved Malware ...")
                no_python = []
                python_file = None
                for name in file_retriever.get_relevant_documents(query):
                    if '.py' in name.page_content:
                        python_file = name.page_content
                    else:
                        no_python.append(name)
                if python_file:
                    print(python_file)
                    print(file_retriever.malware_file_dict[python_file])
                    try:
                        print(no_python[0].page_content)
                        print(file_retriever.malware_file_dict[no_python[0].page_content])
                    except Exception as e:
                        print(e)
                else:
                    try:
                        print(file_retriever.malware_file_dict[no_python[0].page_content])
                        print(file_retriever.malware_file_dict[no_python[1].page_content])
                    except Exception as e:
                        print(e)
                end_time = time.time()
                print(f"elapsed time: {end_time - start_time}")
        except Exception as e:
            print(e)
            pass

# def streamlit_main(malware_dict, retriever):
#     """Streamlit application to retrieve and display malware information."""
#     st.title("Malware Retriever")

#     query = st.chat_input("Search for a Malware")
#     if query:
#         start_time = time.time()
#         st.info("Retrieved Malware ...")
#         for name in retriever.get_relevant_documents(query):
#             st.divider()
#             st.info(name.page_content)
#             malware_list = malware_dict[name.page_content]
#             file_names = [tupla[0] for tupla in malware_list]
#             codes = [tupla[1] for tupla in malware_list]
#             filtered_data = [s.rsplit('\\', 2)[-1] for s in file_names]
#             data = {
#                 'file': filtered_data,
#                 'codes': codes
#             }
#             df = pd.DataFrame(data)
#             st.dataframe(
#                 df,
#                 column_config={
#                     "file": "Malware File",
#                     "codes": "File Code"
#                 },
#                 hide_index=True,
#             )
#             end_time = time.time()
#         st.info(f"elapsed time: {end_time - start_time}")

# if __name__ == '__main__':
#     # Initialize retrievers and malware dictionaries
#     malware_retriever = MalwareRetriever()
#     malware_retriever_instance = malware_retriever.set_retriever()
#     malware_dict = malware_retriever.malware_dict
#     loaded_file_retriever = MalwareFileRetriever().load_file_retriever()
#     malware_file_dict = MalwareFileRetriever().load_malware_file_dict_from_json("MALWARE_FILE_CODE.json")

#     # Execute the main functions
#     main(malware_dict, malware_retriever_instance)
#     find_file(loaded_file_retriever)
#     # streamlit_main(malware_dict, malware_retriever_instance)
